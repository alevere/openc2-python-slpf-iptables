#!/usr/bin/env python 

import subprocess
import json
import os
import sys
import signal

TIMEOUT=10

#Main OpenC2 consumer function/subprocess
def main():
   # handle requests within 10s for UNIX/LINUX or throw error
   # useful for cli tests
   signal.signal(signal.SIGALRM, handler)
   signal.alarm(TIMEOUT)  
   # call function to handle an incoming request
   request_handler()
   signal.alarm(0)

# alarm function to timeout hung requests
def handler(signum, frame):
   server_error(); 
   raise IOError("Couldn't open device!")

#function to parse GET, POST and call action
def request_handler():
   conformance=0
   openc2_actions=['query', 'deny', 'allow', 'update', 'delete']
   openc2_targets=['file', 'ip_addr', 'ip_connection', 'openc2', 'slpf']
   request=sys.stdin.read()
   parsed_json = json.loads(request)
   for alpha in openc2_actions:
      if alpha==parsed_json['action']:
         conformance += 1
   if conformance!=1:
      not_parseable()
   else: 
      conformance=0
   for beta in openc2_targets:    
      if beta==parsed_json['target']:
         conformance += 1
   if conformance!=1:
      not_parseable()
   else:
      conformance=0
   server_ok()

# tell producer something went wrong
def server_error():
   print('HTTP/1.1 500')
   print('Content-Type: application/openc2+json;version=1.0')
   print('X-Correlation-ID: 0')
   print('')
   print(json.dumps(['response', {'status': (500), 'status_text': 'server error'}], sort_keys=True, indent=4))
   print('')

# tell producer we could not interpret request
def not_parseable():
   print('HTTP/1.1 400')
   print('Content-Type: application/openc2+json;version=1.0')
   print('X-Correlation-ID: 0')
   print('')
   print(json.dumps(['response', {'status': (400), 'status_text': 'unable to parse request'}], sort_keys=True, indent=4))
   print('')

# tell producer things were ok
def not_parseable():
   print('HTTP/1.1 200')
   print('Content-Type: application/openc2+json;version=1.0')
   print('X-Correlation-ID: 0')
   print('')
   print(json.dumps(['response', {'status': (200), 'status_text': 'ok'}], sort_keys=True, indent=4))
   print('')

if __name__ == "__main__":
    main()
